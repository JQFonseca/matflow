task_schemas:

  - name: dummy_task_1
    outputs:
      - parameter_2
    methods:
      - name: method_1
        inputs:
          - parameter_1
        implementations:
          - name: software_1
            input_map:
              - inputs:
                  - parameter_1
                file: t1_m1_infile_1
            output_map:
              - files:
                  - outfile.txt
                output: parameter_2
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t1_m1_infile_1]
                  - [--infile2, t1_m1_infile_1]
                  - [--value, parameter_1]
          - name: software_2
            input_map:
              - inputs:
                  - parameter_1
                file: t1_m1_infile_1
            output_map:
              - files:
                  - outfile.txt
                output: parameter_2
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t1_m1_infile_1]
                  - [--infile2, t1_m1_infile_1]
                  - [--value, parameter_1]

  - name: dummy_task_1_inv
    outputs:
      - parameter_1
    methods:
      - name: method_1
        inputs:
          - parameter_2
        implementations:
          - name: software_1
            input_map:
              - inputs:
                  - parameter_2
                file: t1_m1_infile_1
            output_map:
              - files:
                  - outfile.txt
                output: parameter_1
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t1_m1_infile_1]
                  - [--infile2, t1_m1_infile_1]

  - name: dummy_task_2
    outputs:
      - parameter_4
    methods:
      - name: method_1
        inputs:
          - parameter_2
          - parameter_3
        implementations:
          - name: software_1
            input_map:
              - inputs:
                  - parameter_2
                  - parameter_3
                file: t2_m1_infile_1
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t2_m1_infile_1]
                  - [--infile2, t2_m1_infile_1]

  - name: dummy_task_2b
    outputs:
      - parameter_4
    methods:
      - name: method_1
        inputs:
          - parameter_2[group=group_A]
          - parameter_3
        implementations:
          - name: software_1
            input_map:
              - inputs:
                  - parameter_2
                  - parameter_3
                file: t2b_m1_infile_1
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t2b_m1_infile_1]
                  - [--infile2, t2b_m1_infile_1]

  - name: dummy_task_2c
    outputs:
      - parameter_5
    methods:
      - name: method_1
        inputs:
          - parameter_3
          - parameter_4
        implementations:
          - name: software_1
            input_map:
              - inputs:
                - parameter_3
                - parameter_4
                file: t2c_m1_infile_1
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t2c_m1_infile_1]
                  - [--infile2, t2c_m1_infile_1]    

  - name: dummy_task_3b
    outputs:
      - parameter_7
    methods:
      - name: method_1
        inputs:
          - parameter_2[group=G1,alias=parameter_2_G1]
          - parameter_5
          - parameter_6
        implementations:
          - name: software_1
            input_map:
              - inputs:
                - parameter_2_G1
                - parameter_5
                - parameter_6
                file: t3b_m1_infile_1
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t3b_m1_infile_1]
                  - [--infile2, t3b_m1_infile_1]   

  - name: dummy_task_3
    outputs:
      - parameter_6
    methods:
      - name: method_1
        inputs:
          - parameter_5
        implementations:
          - name: software_1
            input_map:
              - inputs:
                  - parameter_5
                file: t3_m1_infile_1
            output_map:
              - files:
                  - outfile.txt
                output: parameter_6                
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t3_m1_infile_1]
                  - [--infile2, t3_m1_infile_1]

  - name: dummy_task_4
    outputs:
      - parameter_8
    methods:
      - name: method_1
        inputs:
          - parameter_2
          - parameter_6
          - parameter_7
          - parameter_9
        implementations:
          - name: software_1
            input_map:
              - inputs:
                - parameter_2
                - parameter_6
                - parameter_7
                - parameter_9
                file: t4_m1_infile_1
            output_map:
              - files:
                  - outfile.txt
                output: parameter_8                
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t4_m1_infile_1]
                  - [--infile2, t4_m1_infile_1]

  - name: dummy_task_5
    inputs:
      - parameter_8[group=my_group]
      - parameter_10
    outputs:
      - parameter_11
    methods:
      - name: method_1
        implementations:
          - name: software_1
            input_map:
              - inputs:
                - parameter_8
                - parameter_10
                file: t5_m1_infile_1
            output_map:
              - files:
                  - outfile.txt
                output: parameter_11
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t5_m1_infile_1]
                  - [--infile2, t5_m1_infile_1]

  - name: dummy_task_5b
    notes: >
      For a task that takes inputs from given contexts like this, it may be assigned a
      context so long as it is not the same as any of the contexts from which it draws its
      inputs (otherwise it would not link to all of its inputs correctly).
    inputs:
      - parameter_8[context=context_A,alias=parameter_8A]
      - parameter_8[context=context_B,alias=parameter_8B]
    outputs:
      - parameter_11
    methods:
      - name: method_1
        implementations:
          - name: software_1
            input_map:
              - inputs:
                - parameter_8A
                - parameter_8B
                file: t5b_m1_infile_1
            output_map:
              - files:
                  - outfile.txt
                output: parameter_11
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t5b_m1_infile_1]
                  - [--infile2, t5b_m1_infile_1]      
                  
  - name: dummy_task_5c
    inputs:
      - parameter_8[context=context_A,alias=parameter_8A_group,group=group_A]
      - parameter_8[context=context_B,alias=parameter_8B_group,group=group_B]
      - parameter_10
    outputs:
      - parameter_11
    methods:
      - name: method_1
        implementations:
          - name: software_1
            input_map:
              - inputs:
                  - parameter_8A_group
                  - parameter_8B_group
                  - parameter_10
                file: t5c_m1_infile_1
            output_map:
              - files:
                  - outfile.txt
                output: parameter_11
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t5c_m1_infile_1]
                  - [--infile2, t5c_m1_infile_1]                   

  - name: dummy_task_6
    inputs:
      - parameter_11
      - parameter_12
    outputs:
      - parameter_13
    methods:
      - name: method_1
        implementations:
          - name: software_1
            input_map:
              - inputs:
                - parameter_11
                - parameter_12
                file: t6_m1_infile_1
            output_map:
              - files:
                  - outfile.txt
                output: parameter_13
            commands:
              - command: hpcflow dummy doSomething
                options:
                  - [--infile1, t6_m1_infile_1]
                  - [--infile2, t6_m1_infile_1]

  - name: estimate_ODF
    version: 1
    outputs:
      - ODF
    methods:
      - name: from_CTF_file
        version: 1
        inputs: 
          - __file__CTF_file
          - rotation_angle
        implementations:
          - name: matlab_mtex
            version: 1
            input_map:
              - inputs:
                  - __file__CTF_file
                  - rotation_angle
                file: estimate_ODF_from_CTF.m
            commands:
              - cmd: matlab -nodisplay -nosplash -nodesktop -r -wait "run('estimate_ODF_from_CTF.m'); exit;"
            output_map:
              - files:
                  - odf.txt
                output: ODF

  - name: model_ODF
    version: 1
    outputs:
      - ODF
    methods:
      - name: uniform_ODF
        version: 1
        inputs:
          - crystal_symmetry
          - specimen_symmetry
        implementations:
          - name: matlab_mtex
            version: 1
            input_map:
              - inputs:
                  - crystal_symmetry
                  - specimen_symmetry
                file: create_model_ODF.m
            commands:
              - cmd: matlab -nodisplay -nosplash -nodesktop -r -wait "run('create_model_ODF.m'); exit;"
            output_map:
              - files:
                  - odf.txt
                output: ODF

  - name: sample_texture
    version: 1
    outputs:
      - orientations
    methods:
      - name: from_ODF
        version: 1
        inputs: 
          - ODF
          - num_orientations
        implementations:
          - name: matlab_mtex
            version: 1
            input_map:
              - inputs:
                  - ODF
                  - num_orientations
                file: sample_texture_from_ODF.m
            commands:
              - cmd: matlab -nodisplay -nosplash -nodesktop -r -wait "run('sample_texture_from_ODF.m'); exit;"
            output_map:
              - files:
                  - orientations.txt
                output: orientations

  - name: generate_microstructure_seeds
    version: 1
    outputs:
      - microstructure_seeds
    methods:
      - name: random
        version: 1
        inputs:
          - grid_size
          - num_grains          
        implementations:
          - name: damask
            version: 1
            outputs:
              - microstructure_seeds
            commands:
              - command: seeds_fromRandom
                stdout: positions.txt
                options: 
                  - [-N, num_grains]
                  - [-g, grid_size]       
            output_map:
              - files: [positions.txt]
                output: microstructure_seeds

  - name: generate_volume_element
    version: 1
    outputs:
      - volume_element
    methods:
      - name: random_voronoi
        version: 1
        notes: >
          In this method we use the random orientations that already exist in
          microstructure_seeds.
        inputs:
          - microstructure_seeds
          - size
        implementations:
          - name: damask
            inputs:
              - rescale_size
              - rescale_grid          
            version: 1
            input_map:
              - inputs:
                  - microstructure_seeds
                file: orientation.seeds
            output_map:
              - files:
                  - volume_element.geom
                output: volume_element
            commands:
              - command: geom_fromVoronoiTessellation
                stdin: orientation.seeds
                stdout: volume_element_initial.geom 
                options:
                  - [-s, size]
              - command: geom_rescale
                stdin: volume_element_initial.geom
                stdout: volume_element.geom 
                options:
                  - [-g, rescale_grid]
                  - [-s, rescale_size]

      - name: random_voronoi_from_orientations      
        version: 1
        notes: >
          In this method we replace the orientations in microstructure_seeds
          with orientations computed from a previous task.        
        inputs:
          - microstructure_seeds
          - orientations
          - size
        implementations:
          - name: damask
            inputs: 
              - rescale_size            
              - rescale_grid
            version: 1
            inputs:
              - rescale_size
              - rescale_grid
            input_map:
              - inputs:
                  - microstructure_seeds
                  - orientations
                file: orientation.seeds
            output_map:
              - files:
                  - volume_element.geom
                output: volume_element
            commands:
              - command: geom_fromVoronoiTessellation
                stdin: orientation.seeds
                stdout: volume_element_initial.geom 
                options:
                  - [-s, size]
              - command: geom_rescale
                stdin: volume_element_initial.geom
                stdout: volume_element.geom 
                options:
                  - [-g, rescale_grid]
                  - [-s, rescale_size]

  - name: generate_load_case
    version: 1
    inputs:
      - time
      - incs
      - target_strain_rate    
    methods:
      - name: uniaxial
        version: 1
        inputs:
          - direction # x, y or z
      - name: biaxial
        version: 1
        inputs:
          - direction # xy, xz or yz        
      - name: plane_strain
        version: 1
        inputs:
          - direction # xy, xz or yz
      - name: random_2d
        version: 1
        inputs:
          - normal_direction # x, y, or z (i.e. load in yz, xz or xy planes)
    outputs:
      - load_case

  - name: visualise_volume_element
    version: 1
    inputs:
      - volume_element
    methods:
      - name: VTK
        outputs:
          - __file__VTR_file
        version: 1
        implementations:
          - name: damask
            version: 1
            input_map: 
              - inputs:
                  - volume_element
                file: geom.geom
            commands:
              - command: geom_check
                parameters: [geom.geom]

  - name: fit_yield_function
    version: 1
    inputs:
      - load_response[context=multiaxial,group=yield_function_fit]
      - load_response[context=uniaxial]
      - yield_function_name
      - yield_function_fixed_parameters      
      - yield_function_initial_parameters      
    outputs:
      - fitted_yield_function
    methods:
      - name: formable
        version: 1
        implementations:
          - name: formable
            version: 1
        
  - name: simulate_volume_element_loading
    version: 1
    inputs: 
      - volume_element
      - material_properties
    outputs:
      - volume_element_response
    methods:
      - name: CP_FFT
        version: 1
        implementations:
          - name: damask
            version: 1
            input_map:
              - inputs:
                  - material_properties
                  - volume_element
                file: material.config
              - inputs:
                  - volume_element
                file: geom.geom
            output_map:
              - files: 
                  - geom_load.txt
                output: volume_element_response
            commands:
              - command: DAMASK_spectral
                options:
                  - [--load, load.load]
                  - [--geom, geom.geom]
                stdout: stdout.log
              - command: postResults
                options: 
                  - [--dir, "."]
                  - [--cr, "f,p"]
                parameters: [geom_load.spectralOut]
              - command: addCauchy
                parameters: [geom_load.txt]
              - command: addStrainTensors
                options:
                  - [--logarithmic]
                  - [--left]
                parameters: [geom_load.txt]
              - command: addMises
                options:
                  - [--stress, '"Cauchy"']
                  - [--strain, '"ln(V)"']
                parameters: [geom_load.txt]
